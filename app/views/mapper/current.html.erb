<% content_for :head do %>
  <script type="text/javascript" src="<%= APP_CONFIG[:google_maps_url] %>"></script>
  <script type="text/javascript" src="<%= APP_CONFIG[:socket_io_url] %>"></script>
<% end %>

<div class="container">
  <div class="alert-info lead" id="messages_container">
    Last known Location: <span id="messages"></span>
  </div>

  <div id="mapdiv"></div>
</div>

<script language="JavaScript">
  var socket_host = '<%= APP_CONFIG[:tracking_server] %>'
  var socket_port = 8080;
  var socket_url  = 'http://' + socket_host + ':' + socket_port;
  var http_url = 'http://' + socket_host;
  var socket;

  var map, devices_bounds;
  var devices = [];

  function initMap(){
    //var myLatlng = new google.maps.LatLng(-25.363882,131.044922); //Australia
    var myLatlng = new google.maps.LatLng(0,0);

    var mapOptions = {
      center: myLatlng,
      zoom: 10
    };

    map = new google.maps.Map(document.getElementById('mapdiv'), mapOptions);
    devices_bounds = new google.maps.LatLngBounds();
  }

  function getDevice(device_id, markers){
    var device = null;

    for(var i = 0; i < markers.length; i++){
      if(markers[i].device_id === device_id){
        device = markers[i];
        break;
      }
    }

    return device;
  }

  function processGPS(gps){
    var device = getDevice(gps.device_id, devices);
    if(device == null){
      device = createDevice(gps);
      devices.push(device);
    }
    else{
      moveDevice(device, gps);
    }
  }

  function createDevice(gps){
    var pos = getLatLngFromString(gps);
    var marker = new google.maps.Marker({
      position: pos,
      map: map
    });

    marker.set("device_id", gps.device_id);
    adjustMapBounds(pos);

    return marker;
  }

  function moveDevice(device, gps){
    var pos = getLatLngFromString(gps);
    device.setPosition(pos);
    adjustMapBounds(pos);
  }

  function adjustMapBounds(pos){
    // need to wait for the tiles to load before we can get the map bounds
    var currentBounds = map.getBounds();

    if(typeof(currentBounds) != 'undefined' &&  currentBounds.contains(pos) == false){
      devices_bounds.extend(pos);
      map.fitBounds(devices_bounds);
    }
  }

  function fitAllDevicesOnMap(){
    for(var i = 0; i < devices.length; i++){
      var pos = devices[i].getPosition();
      devices_bounds.extend(pos);
      map.fitBounds(devices_bounds);
    }
  }

  function getLatLngFromString(obj){
    var lat = parseFloat(obj.gps_latitude), lon = parseFloat(obj.gps_longitude);
    return new google.maps.LatLng(lat, lon);
  }

  function formatGPSHTMLOutput(gps){
    var unix_timestamp = gps.gps_timestamp;
    var date = new Date(unix_timestamp*1);
    var formattedTime = date.toLocaleString();

    var s =  formattedTime + ' ';
    s += '(' + gps.gps_latitude + ',' + gps.gps_longitude + ')';
    return s;
  }

  function fetchLastKnownDeviceLocation(){
    var url = socket_url  + '/devices?user_id=' + <%= @user_id %>;
    $.get(url, function( data ) {
      for(var i=0;i < data.length;i++){
        var gps = data[i];
        if(gps.gps_latitude != 0 && gps.gps_longitude != 0){
          device = createDevice(data[i]);
          devices.push(device);

          $('#messages').html(formatGPSHTMLOutput(gps));
        }
      }

      fitAllDevicesOnMap();

    });
  }

  function initSocket(){
    socket = io.connect(socket_url);

    socket.on('connect', function () {
        // Identify this socket with the user_id
      socket.emit('setUserId', <%= @user_id %>);

      <% @devices.each do |device| %>
        socket.emit('addDevice', '<%= device %>');
      <% end %>
    });

    socket.on('message', function(d){
      var parsedObj = JSON.parse(d);
      if(parsedObj.type === 'gps'){
        var gps = parsedObj.data;
        $('#messages').html(formatGPSHTMLOutput(gps));
        processGPS(gps);
      }
    });
  }

  $(document).ready(function(){
    initMap();
    initSocket();
    fetchLastKnownDeviceLocation();
  });
</script>